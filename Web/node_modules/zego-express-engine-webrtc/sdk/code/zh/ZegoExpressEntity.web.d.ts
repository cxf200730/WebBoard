import { ZegoRTMEvent, ZegoUser } from "zego-express-engine-webrtm/sdk/code/zh/ZegoExpressEntity";
/**
 * 麦克风发送声音状态
 *
 * 详情描述：麦克风发送声音状态。
 *
 * 业务场景：获取麦克风开关状态。
 *
 */
export declare enum ZegoRangeAudioMicrophoneState {
    /**
     * 关闭状态
     */
    Off = 0,
    /**
     * 开启中
     */
    TurningOn = 1,
    /**
     * 开启状态
     */
    On = 2
}
/**
 * 范围语音模式
 *
 * 详情描述：范围语音模式。
 *
 */
export declare enum ZegoRangeAudioMode {
    /**
     * 所有人模式，可以与房间内所有人交流
     */
    World = 0,
    /**
     * 仅小队模式，只与小队内的成员交流
     */
    Team = 1
}
/**
 * 创建摄像头媒体流相关参数约束
 *
 * Note: 详情描述：该类用于约束接口 createStream 的参数 source.camera。
 *
 * Note: 业务场景：创建摄像头音视频流。
 *
 * Note: 注意事项：
 * 1. 创建流成功后拿到的 stream 为 mediaStream 对象，开发者可通过赋值给 <video> 或 <audio> 对象的 srcObject 属性进行渲染。
 * 2. audioInput 和 videoInput 不指定时使用默认设备。
 * 3. 降噪、自动增益、回声消除三者默认为开启，若无特殊情况，建议客户保持这三项取值为 true。
 * 4. 当 camera 的 videoQuality 为 4 时，camera 增加 width / height / frameRate / bitrate 属性，这几个参数只支持正整数，必须要把这四个属性也传递给 SDK。
 * 5. 如果设置了 facingMode 参数，会忽略 videoInput 参数。
 *
 */
export interface ZegoCamera {
    /**
     * 是否需要音频，默认为 true
     */
    audio?: boolean;
    /**
     * 音频输入设备，不传则为浏览器选择的默认设备
     */
    audioInput?: string;
    /**
     * 音频码率，默认为 48kbps
     */
    audioBitrate?: number;
    /**
     * 是否需要视频
     */
    video?: boolean;
    /**
     * 视频输入设备，不传则为浏览器选择的默认设备
     */
    videoInput?: string;
    /**
     * 视频质量等级，默认质量等级为 2：
     * 1：分辨率 320 * 240，帧率 15，码率 300 kbps
     * 2：分辨率 640 * 480，帧率:15，码率 800 kbps
     * 3：分辨率 1280 * 720，帧率:20，码率 1500 kbps
     * 4：分辨率 width * height，帧率 frameRate，码率:  bitrate（kbps）
     * 注：当 videoQuality 为 4 时，width、height、frameRate 和 bitrate 四个参数必填。
     */
    videoQuality?: 1 | 2 | 3 | 4;
    /**
     * 摄像头朝向，“user” 表示前置摄像头，“environment” 表示后置摄像头
     */
    facingMode?: "user" | "environment";
    /**
     * 声道数，1 为单声道，2 为双声道，默认为单声道
     */
    channelCount?: 1 | 2;
    /**
     * 是否开启降噪，默认开启
     */
    ANS?: boolean;
    /**
     * 是否开启自动增益，默认开启
     */
    AGC?: boolean;
    /**
     * 是否开启回声消除，默认开启
     */
    AEC?: boolean;
    /**
     * 分辨率宽，videoQuality 为 4 时生效
     */
    width?: number;
    /**
     * 分辨率高，videoQuality 为 4 时生效
     */
    height?: number;
    /**
     * 码率，videoQuality 为 4 时生效
     */
    bitrate?: number;
    /**
     * 帧率，videoQuality 为 4 时生效
     */
    frameRate?: number;
    /**
     * 开始码率，默认为 “default”，环境要求：谷歌内核浏览器及 2.7.0 以上版本的 SDK 。
     * 值为 “default” 表示使用 webrtc 默认开始码率 300kbps  然后慢慢上升；值为 “target” 表示快速上升到已设置的目标码率。
     */
    startBitrate?: "default" | "target";
}
export interface ZegoCapabilityDetection {
    /**
     * 是否支持webRTC协议,true代表可以使用webRTC协议传输流
     */
    webRTC?: boolean;
    /**
     * 是否支持自定义流(不通过摄像头或者屏幕捕捉采集到的其他流, 比如video标签播放的mp4等)
     */
    customCapture?: boolean;
    /**
     * 摄像头是否有权限调用
     */
    camera?: boolean;
    /**
     * 麦克风是否有权限调用
     */
    microphone?: boolean;
    /**
     * 是否支持屏幕共享功能
     */
    screenSharing?: boolean;
    /**
     * 浏览器支持的视频编码格式; 需要注意的是有些浏览器检测会支持某一种编码格式,但实际系统阉割了该功能, 所以如果某个编码格式返回false,则一定不支持, true 不一定100%支持
     */
    videoCodec?: ZegoVideoCodec;
    /**
     * 设备错误的具体信息
     */
    errInfo: ZegoCapabilityErrorInfo;
    /**
     * 根据传入的类型判断是否支持
     */
    result?: boolean;
}
export interface ZegoCapabilityError {
    /**
     * 错误名称
     */
    name?: string;
    /**
     * 错误描述信息
     */
    message?: string;
}
export interface ZegoCapabilityErrorInfo {
    webRTC?: ZegoCapabilityError;
    customCapture?: ZegoCapabilityError;
    camera?: ZegoCapabilityError;
    microphone?: ZegoCapabilityError;
    extendedDate?: string;
}
export interface ZegoCheckSingleType {
    /**
     * 检测浏览器是否支持 weRTC
     */
    webRTC: "webRTC";
    /**
     * 检测浏览器是否支持 自定义流
     */
    customCapture: "customCapture";
    /**
     * 检测摄像头是否有权限调用
     */
    camera: "camera";
    /**
     * 检测麦克风是否有权限调用
     */
    microphone: "microphone";
    /**
     * 检测是否支持屏幕共享
     */
    screenSharing: "screenSharing";
    /**
     * 检测是否支持H264编码格式
     */
    H264: "H264";
    /**
     * 检测是否支持VP8编码格式
     */
    VP8: "VP8";
}
/**
 * 创建第三方媒体流相关参数约束
 *
 * Note: 详情描述：该类用于约束接口 createStream 的参数 source.custom。
 *
 * Note: 业务场景：分享网络或本地的视频资源。
 *
 */
export interface ZegoCustom {
    /**
     * 第三方源,<video>或<audio>媒体对象或MediaStream
     */
    source: HTMLMediaElement | MediaStream;
    /**
     * 视频码率
     */
    bitrate?: number;
    /**
     * 音频码率，默认为 48kbps
     */
    audioBitrate?: number;
    /**
     * 声道数，1为单声道，2为双声道，默认单声道
     */
    channelCount?: number;
    /**
     * 开始码率，默认为 “default”，环境要求：谷歌内核浏览器及 2.7.0 以上版本的 SDK 。
     * 值为 “default” 表示使用 webrtc 默认开始码率 300kbps  然后慢慢上升；值为 “target” 表示快速上升到已设置的目标码率。
     */
    startBitrate?: "default" | "target";
}
export interface ZegoDeviceInfo {
    deviceName: string;
    deviceID: string;
}
export interface ZegoDeviceInfos {
    microphones: ZegoDeviceInfo[];
    speakers: ZegoDeviceInfo[];
    cameras: ZegoDeviceInfo[];
}
/**
 * 媒体服务相关事件集合
 *
 * Note: 详情描述：描述事件名及其对应的回调参数。
 *
 * Note: 业务场景：用于约束注册事件接口 on 和注销事件接口 off 的参数。
 *
 */
export interface ZegoRTCEvent {
    /**
     * 推流质量回调
     */
    publishQualityUpdate: PublishQualityUpdateCallBack;
    /**
     * 推流状态回调
     */
    publisherStateUpdate: PublisherStateUpdateCallBack;
    /**
     * 屏幕共享中断回调
     */
    screenSharingEnded: ScreenSharingEndedCallBack;
    /**
     * 房间内流变化回调
     *
     * 收到流删除通知时，开发者可将 extendedData 由字符串转为 json 对象得到 stream_delete_reason 字段，该字段为流删除原因的数组，stream_delete_reason[].code 字段可能为如下值：1（用户主动停止推流）；  2（用户心跳超时）；  3（用户重复登录）；  4（用户被踢出）；  5（用户断线）；  6（被服务端移除）
     */
    roomStreamUpdate: RoomStreamUpdateCallBack;
    /**
     * 拉流质量回调，每次回调间隔3s
     */
    playQualityUpdate: PlayQualityUpdateCallBack;
    /**
     * 接收对端设置的流附加信息
     */
    streamExtraInfoUpdate: StreamExtraInfoUpdateCallBack;
    /**
     * 拉流状态回调
     */
    playerStateUpdate: PlayerStateUpdateCallBack;
    /**
     * 推流端的摄像头状态发生改变时触发
     */
    remoteCameraStatusUpdate: RemoteCameraStatusUpdateCallBack;
    /**
     * 推流端的麦克风状态改变时触发
     */
    remoteMicStatusUpdate: RemoteMicStatusUpdateCallBack;
    /**
     * 音浪回调
     */
    soundLevelUpdate: SoundLevelUpdateCallBack;
    /**
     * 监听视频设备状态变化
     */
    videoDeviceStateChanged: videoDeviceStateChangedCallBack;
    /**
     * 监听音频设备状态变化
     */
    audioDeviceStateChanged: audioDeviceStateChangedCallBack;
    /**
     * 监听设备异常
     */
    deviceError: deviceErrorCallBack;
    /**
     * 本地采集音频声浪回调
     */
    capturedSoundLevelUpdate: CapturedSoundLevelUpdateCallBack;
}
/**
 * createStream 接口的配置参数约束
 *
 * Note: 详情描述：该类用于约束接口 createStream 的配置参数。
 *
 * Note: 业务场景：创建预览音视频流。
 *
 * Note: 注意事项：camera、screen 和 custom 三个参数在每次调用接口 createStream 时只能选填其中一个。
 *
 */
export interface ZegoLocalStreamConfig {
    /**
     * 摄像头麦克风采集流相关配置
     */
    camera?: ZegoCamera;
    /**
     * 屏幕捕捉采集流相关配置
     */
    screen?: boolean | ZegoScreen;
    /**
     * 第三方流采集相关配置
     */
    custom?: ZegoCustom;
}
export interface ZegoMixStreamAdvance {
    /**
     * 混流背景颜色; backgroundColor 为十六进制的 RGB，输入格式必须为 0xRRGGBBxx
     */
    backgroundColor?: number;
    /**
     * 混流背景图片; backgroundImage 需要提前在即构后台预设 imageId，输入格式为 preset-id://xxx
     */
    backgroundImage?: string;
    /**
     * 混流视频编码，'vp8'(string) 或 ' h264' (string),默认 'h264'(string)
     */
    videoCodec?: "VP8" | "H264" | "vp8" | "h264";
}
export interface ZegoMixStreamConfig {
    /**
     * 混流任务 id（客户自定义,务必保证唯一），必填，最大为256个字符,仅支持数字,英文字符 和 '~', '!', '@', '#', '$', '', '^', '&', '*', '(', ')', '_', '+', '=', '-', ', ';', '’', ',', '
     */
    taskID: string;
    /**
     * 混流输入流列表
     */
    inputList: ZegoMixStreamInput[];
    /**
     * 混流输出流列表
     */
    outputList: string[] | ZegoMixStreamOutput[];
    /**
     * 混流输出配置
     */
    outputConfig: ZegoMixStreamOutputConfig;
}
export interface ZegoMixStreamInput {
    /**
     * 输入流 ID
     */
    streamID: string;
    /**
     * 混流内容类型;contentType 取值为'VIDEO'(音视频)、'AUDIO'(纯音频),默认为'VIDEO'
     */
    contentType?: "VIDEO" | "AUDIO";
    /**
     * 流在输出画布上的布局
     */
    layout: ZegoMixStreamLayout;
}
export interface ZegoMixStreamLayout {
    /**
     * 目标位置，上
     */
    top: number;
    /**
     * 目标位置，左
     */
    left: number;
    /**
     * 目标位置，下
     */
    bottom: number;
    /**
     * 目标位置，右
     */
    right: number;
}
export interface ZegoMixStreamOutput {
    /**
     * 混流输出流 ID 或 URL
     */
    target: string;
}
export interface ZegoMixStreamOutputConfig {
    /**
     * 混流输出视频码率，kbps
     * 数值 （必须，且大于 0）
     */
    outputBitrate: number;
    /**
     * 混流输出视频帧率
     */
    outputFPS: number;
    /**
     * 混流输出视频分辨率宽度
     */
    outputWidth: number;
    /**
     * 混流输出视频分辨率高度
     */
    outputHeight: number;
    /**
     * 混流输出音频编码
     * outputAudioCodecID 可选0：HE_AAC,1：AAC_LC,2：MP3,3: OPULS 默认为0
     */
    outputAudioCodecID?: 0 | 1 | 2 | 3;
    /**
     * 混流输出音频码率，kbps
     */
    outputAudioBitrate?: number;
    /**
     * 混流输出声道数
     */
    outputAudioChannels?: 1 | 2;
}
export interface ZegoPlayAudioStats {
    /**
     * 音频码率
     */
    audioBitrate: number;
    /**
     * 音频编码格式"opus"
     */
    audioCodec: string;
    /**
     * 网络抖动
     */
    audioJitter: number;
    /**
     * 音量
     */
    audioLevel: number;
    /**
     * 丢包数
     */
    audioPacketsLost: number;
    /**
     * 丢包率
     */
    audioPacketsLostRate: number;
    /**
     * 拉流音频质量，-1 表示未知，0 表示 极好,1 表示好，2 表示中等，3 表示 差，4 表示极差
     */
    audioQuality: number;
    /**
     * 采样率
     */
    audioSamplingRate: number;
    /**
     * 音轨是否被关闭
     */
    muteState: "0" | "1";
    /**
     * 音频帧率
     */
    audioFPS: number;
    /**
     * 音频发送能量
     */
    audioSendLevel: number;
    /**
     * 音频编码格式
     */
    googCodecName: string;
}
/**
 * 拉流质量回调详细信息
 *
 */
export interface ZegoPlayStats {
    /**
     * 视频相关描述
     */
    video: ZegoPlayVideoStats;
    /**
     * 音频相关描述
     */
    audio: ZegoPlayAudioStats;
}
export interface ZegoPlayVideoStats {
    /**
     * 接收视频高
     */
    frameHeight: number;
    /**
     * 接收视频宽
     */
    frameWidth: number;
    /**
     * 视频编码格式
     */
    googCodecName: string;
    /**
     * 视轨是否被关闭
     */
    muteState: "0" | "1";
    /**
     * 视频码率
     */
    videoBitrate: number;
    /**
     * 视频转码帧率
     */
    videoFPS: number;
    /**
     * 视频丢包数
     */
    videoPacketsLost: number;
    /**
     * 视频丢包率
     */
    videoPacketsLostRate: number;
    /**
     * 视频解码帧率
     */
    videoTransferFPS: number;
    /**
     * 拉流视频质量，-1 表示未知，0 表示 极好,1 表示好，2 表示中等，3 表示 差，4 表示极差
     */
    videoQuality: number;
    /**
     * 视频解码总大小
     */
    videoFramesDecoded: number;
    /**
     * 当前实际接收的视频帧丢失数
     */
    videoFramesDropped: number;
}
/**
 * 拉流状态
 *
 */
export interface ZegoPlayerState {
    /**
     * 流id
     */
    streamID: string;
    /**
     * NO_PLAY：未拉流状态，PLAY_REQUESTING：正在请求拉流状态，PLAYING：正在拉流状态
     */
    state: "NO_PLAY" | "PLAY_REQUESTING" | "PLAYING";
    /**
     * 错误码
     */
    errorCode: number;
    /**
     * 扩展信息
     */
    extendedData: string;
}
export interface ZegoPublishAudioStats {
    /**
     * 音频码率
     */
    audioBitrate: number;
    /**
     * 音频编码格式
     */
    audioCodec: string;
    /**
     * 音频丢包数
     */
    audioPacketsLost: number;
    /**
     * 音频丢包率
     */
    audioPacketsLostRate: number;
    /**
     * 音频编码格式
     */
    googCodecName: string;
    /**
     * 音轨是否被关闭
     */
    muteState: "0" | "1";
    /**
     * 音频帧率
     */
    audioFPS: number;
    /**
     * 推流音频质量，-1 表示未知，0 表示 极好,1 表示好，2 表示中等，3 表示 差，4 表示极差
     */
    audioQuality: number;
}
export interface ZegoPublishStats {
    /**
     * 推流视频数据
     */
    video: ZegoPublishVideoStats;
    /**
     * 推流音频数据
     */
    audio: ZegoPublishAudioStats;
}
export interface ZegoPublishStreamAudioConfig {
    /**
     * 是否开启降噪
     */
    ANS?: boolean;
    /**
     * 是否开启自动增益
     */
    AGC?: boolean;
    /**
     * 是否开启回声消除
     */
    AEC?: boolean;
}
export interface ZegoPublishStreamConfig {
    /**
     * 分辨率宽
     */
    width?: number;
    /**
     * 分辨率高
     */
    height?: number;
    /**
     * 帧率
     */
    frameRate?: number;
    /**
     * 最大码率
     */
    maxBitrate?: number;
}
export interface ZegoPublishVideoStats {
    /**
     * 采集视频高
     */
    frameHeight: number;
    /**
     * 采集视频宽
     */
    frameWidth: number;
    /**
     * 视频编码格式
     */
    googCodecName: string;
    /**
     * 视轨是否被关闭
     */
    muteState: "0" | "1";
    /**
     * 视频码率
     */
    videoBitrate: number;
    /**
     * 视频转码帧率
     */
    videoFPS: number;
    /**
     * 视频丢包数
     */
    videoPacketsLost: number;
    /**
     * 视频丢包率
     */
    videoPacketsLostRate: number;
    /**
     * 视频编码帧率
     */
    videoTransferFPS: number;
    /**
     * 推流质量，-1 表示未知，0 表示 极好,1 表示好，2 表示中等，3 表示 差，4 表示极差
     */
    videoQuality: number;
}
/**
 * 推流状态
 *
 */
export interface ZegoPublisherState {
    /**
     * 流ID
     */
    streamID: string;
    /**
     * NO_PUBLISH：未推流状态，PUBLISH_REQUESTING：正在请求推流状态，PUBLISHING：正在推流状态
     */
    state: "PUBLISHING" | "NO_PUBLISH" | "PUBLISH_REQUESTING";
    /**
     * 错误码
     */
    errorCode: number;
    /**
     * 扩展信息
     */
    extendedData: string;
}
/**
 * 范围语音功能相关事件集合
 *
 * Note: 详情描述：描述事件名及其对应的回调参数。
 *
 * Note: 业务场景：用于约束注册事件接口 on 和注销事件接口 off 的参数。
 *
 */
export interface ZegoRangeAudioEvent {
    /**
     * 麦克风状态更新回调
     */
    microphoneStateUpdate: MicrophoneStateUpdateCallBack;
}
/**
 * 创建屏幕共享媒体流相关参数约束
 *
 * Note: 详情描述：该类用于约束接口 createStream 的参数 source.camera。
 *
 * Note: 业务场景：创建屏幕共享媒体流。
 *
 * Note: 注意事项： 当 videoQuality 为 4 时，camera 增加 width / height / frameRate / bitrate 属性，这几个参数只支持正整数，必须要把这四个属性也传递给 SDK。
 *
 */
export interface ZegoScreen {
    /**
     * 是否需要音频，默认为 false
     */
    audio?: boolean;
    /**
     * 一般而言，屏幕共享视频质量的选择要根据实际情况和场景来确定，screen 中的 videoQuality 提供三种预设值：
     *
     * 1：帧率较大，适合对流畅度要求较高的场景。
     * 2：适合在流畅度和清晰度之间取得平衡的场景。
     * 3：码率较大，适合对清晰度要求较高的场景。
     * 除了以上三种预设值，videoQuality 还提供一种自定义取值 4，可自定义帧率、码率，screen 增加 frameRate / bitrate 属性，使用时需要把这两个属性也传递给 SDK。
     *
     * 视频质量等级，默认质量等级为 2
     * 1  帧率:20	码率: 800K
     * 2  帧率:15	码率: 1500K
     * 3  帧率:5	        码率: 2000K
     * 4  帧率:frameRate	码率: bitrate（k）
     */
    videoQuality?: 1 | 2 | 3 | 4;
    /**
     * 分辨率宽
     */
    width?: number;
    /**
     * 分辨率高
     */
    height?: number;
    /**
     * 码率
     */
    bitrate?: number;
    /**
     * 帧率
     */
    frameRate?: number;
    /**
     * 码率（旧写法，建议使用 bitrate）
     */
    bitRate?: number;
    /**
     * 开始码率，默认为 “default”，环境要求：谷歌内核浏览器及 2.7.0 以上版本的 SDK 。
     * 值为 “default” 表示使用 webrtc 默认开始码率 300kbps  然后慢慢上升；值为 “target” 表示快速上升到已设置的目标码率。
     */
    startBitrate?: "default" | "target";
}
export interface ZegoServerResponse {
    /**
     * 返回错误码,为0则是成功
     */
    errorCode: number;
    /**
     * 扩展信息
     */
    extendedData?: string;
}
/**
 * 音浪信息
 *
 */
export interface ZegoSoundLevelInfo {
    /**
     * 流ID
     */
    streamID: string;
    /**
     * 音浪大小
     */
    soundLevel: number;
    /**
     * 用于区分推拉流
     */
    type: string;
}
export interface ZegoStreamList {
    /**
     * 流 ID
     */
    streamID: string;
    /**
     * 流对应的用户
     */
    user: ZegoUser;
    /**
     * 流附加信息
     */
    extraInfo: string;
    /**
     * flv 播放地址
     */
    urlsFLV: string;
    /**
     * rtmp 播放地址
     */
    urlsRTMP: string;
    /**
     * hls 播放地址
     */
    urlsHLS: string;
    /**
     * https 协议的 flv 播放地址
     */
    urlsHttpsFLV: string;
    /**
     * https 协议的 hls 播放地址
     */
    urlsHttpsHLS: string;
}
export interface ZegoVideoCodec {
    /**
     * 是否支持H264编解码能力
     */
    H264: boolean;
    /**
     * 是否支持VP8编解码能力
     */
    VP8: boolean;
}
export interface ZegoWebPlayOption {
    /**
     * 是否需要拉取视频，默认为 true;
     * 通常情况下建议不填，SDK 默认会根据拉到的实际设备状态选择是否拉音视频
     */
    video?: boolean;
    /**
     * 是否需要拉取音频，默认为 true;
     * 通常情况下建议不填，SDK 默认会根据拉到的实际设备状态选择是否拉音视频
     */
    audio?: boolean;
    /**
     * 拉流额外参数;鉴权参数 streamParams 格式如下：'zg_expired=XX&zg_nonce=XX&zg_token=XX',只有需要配置鉴权时才传入，否则请忽略
     */
    streamParams?: string;
    /**
     * 拉流选取编码格式，只能传入 'VP8' (string) 或 'H264' (string)
     */
    videoCodec?: "VP8" | "H264";
    /**
     * 拉流模式，0表示仅从RTC拉流,2表示仅从 L3 拉流，默认为0
     */
    resourceMode?: 0 | 2;
}
export interface ZegoWebPublishOption {
    /**
     * 推流备选参数 ; 备选参数 streamParams 格式如下：'zg_expired=XX&zg_nonce=XX&zg_token=XX'，只有需要配置鉴权才传入（可选功能）
     */
    streamParams?: string;
    /**
     * 流附加信息
     */
    extraInfo?: string;
    /**
     * 推流视频编码，只能传入 'VP8' (string) 或 'H264' (string)，默认值为 'H264' 。
     */
    videoCodec?: "VP8" | "H264";
    /**
     * 房间ID，开启多房间功能后必填，选择在哪个房间推流。
     */
    roomID?: string;
}
/**
 * 本地采集音频声浪回调，该接口目前不兼容 safari
 *
 * @param soundLevel 本地采集的声浪值，取值范围为 0.0 ~ 100.0 。
 */
declare type CapturedSoundLevelUpdateCallBack = (soundLevel: number) => void;
/**
 * 麦克风和音频上行状态更新回调
 *
 * Note: 详情描述：麦克风和音频上行的状态通知，开启发送音频是异步过程，中间的状态切换都通过该接口回调。
 *
 * Note: 触发条件：调用 ZegoExpressRangeAudio 的 enableMicrophone 接口。
 *
 * Note: 重点提示：必须在 enableMicrophone 接口调用前监听
 *
 * Note: 支持版本：2.10.0
 *
 * @param state 麦克风更新状态
 * @param errorCode 错误码
 * @param extenedData 描述信息
 */
declare type MicrophoneStateUpdateCallBack = (state: ZegoRangeAudioMicrophoneState, errorCode: number, extendedData?: string) => void;
/**
 * 拉流质量回调,拉流成功后开始触发
 *
 * Note: 详情描述：订阅拉流质量回调
 *
 * Note: 触发条件：拉流成功后
 *
 * Note: 限制频率：无
 *
 * Note: 关注回调：无
 *
 * Note: 重点提示：每 3 秒回调一次
 *
 * Note: 支持版本：1.0.0
 *
 * Note: 废弃时间：无
 *
 * @param streamID 流 ID
 * @param stats 拉流质量回调信息
 */
declare type PlayQualityUpdateCallBack = (streamID: string, stats: ZegoPlayStats) => void;
/**
 * 拉流状态发生变化时回调
 *
 * Note: 详情描述：拉流的状态通知，拉流是异步过程，中间的状态切换都通过该接口回调。监听该回调，对重试依旧不能成功的情况，做错误日志收集，提示客户
 *
 * Note: 触发条件：开始拉流后
 *
 * Note: 限制频率：无
 *
 * Note: 关注回调：无
 *
 * Note: 重点提示：必须在拉流前监听
 *
 * Note: 支持版本：1.0.0
 *
 * Note: 废弃时间：无
 *
 * @param result 拉流状态结果
 */
declare type PlayerStateUpdateCallBack = (result: ZegoPlayerState) => void;
/**
 * 订阅推流质量回调
 *
 * Note: 详情描述：订阅推流质量回调
 *
 * Note: 触发条件：推流成功后
 *
 * Note: 限制频率：无
 *
 * Note: 关注回调：无
 *
 * Note: 重点提示：每 3 秒回调一次
 *
 * Note: 支持版本：1.0.0
 *
 * Note: 废弃时间：无
 *
 * @param streamID 推流流ID
 * @param stats 推流质量描述
 */
declare type PublishQualityUpdateCallBack = (streamID: string, stats: ZegoPublishStats) => void;
/**
 * 推流状态回调
 *
 * Note: 详情描述：推流的状态通知，推流是异步过程，中间的状态切换都通过该接口回调。监听该回调，对重试依旧不能成功的情况，做错误日志收集，提示客户
 *
 * Note: 触发条件：开始推流后
 *
 * Note: 限制频率：无
 *
 * Note: 关注回调：无
 *
 * Note: 重点提示：必须在推流前监听
 *
 * Note: 支持版本：1.0.0
 *
 * Note: 废弃时间：无
 *
 * @param result 推流状态结果
 */
declare type PublisherStateUpdateCallBack = (result: ZegoPublisherState) => void;
/**
 * 拉流摄像头状态回调
 *
 * @param streamID 流 ID
 * @param status 所拉流的摄像头状态 'OPEN'表示开启 'MUTE'表示关闭
 */
declare type RemoteCameraStatusUpdateCallBack = (streamID: string, status: "OPEN" | "MUTE") => void;
/**
 * 拉流麦克风状态回调
 *
 * @param streamID 流 ID
 * @param status 所拉流的麦克风状态 'OPEN'表示开启 'MUTE'表示关闭
 */
declare type RemoteMicStatusUpdateCallBack = (streamID: string, status: "OPEN" | "MUTE") => void;
/**
 * 监听已登录房间内流的变化（增加，删除）
 *
 * Note: 详情描述：监听已登录房间内流的变化（增加，删除）
 *
 * Note: 触发条件：房间内有流新增或删除
 *
 * Note: 限制频率：无
 *
 * Note: 重点提示：需要在登录房间前调用
 *
 * Note: 支持版本：1.0.0
 *
 * Note: 废弃时间：无
 *
 * @param roomID 房间ID
 * @param updateType DELETE：流删除，ADD：流新增
 * @param streamList 更新流列表
 * @param extendedData 扩展信息
 */
declare type RoomStreamUpdateCallBack = (roomID: string, updateType: "DELETE" | "ADD", streamList: ZegoStreamList[], extendedData: string) => void;
/**
 * 屏幕共享中断回调
 *
 * Note: 详情描述：监听因为点击系统停止按钮，或者关闭捕捉进程等导致的屏幕共享流被动关闭
 *
 * Note: 触发条件：屏幕共享后点击系统停止或者关闭捕捉进程等
 *
 * Note: 限制频率：无
 *
 * Note: 重点提示：必须在屏幕共享前监听
 *
 * Note: 支持版本：1.0.0
 *
 * Note: 废弃时间：无
 *
 * @param mediaStream 创建屏幕共享流得到的流对象
 */
declare type ScreenSharingEndedCallBack = (mediaStream: MediaStream) => void;
/**
 * 推拉流音浪回调,该接口目前不兼容safari
 *
 * @param soundLevelList 声浪信息列表，包括流id，声浪大小，及流状态
 */
declare type SoundLevelUpdateCallBack = (soundLevelList: ZegoSoundLevelInfo[]) => void;
/**
 * 流附加消息变化时回调
 *
 * Note: 详情描述：接收对端设置的流附加信息
 *
 * Note: 触发条件：流附加消息更新
 *
 * Note: 支持版本：1.0.0
 *
 * Note: 废弃时间：无
 *
 * @param roomID 房间ID
 * @param streamList 流信息
 */
declare type StreamExtraInfoUpdateCallBack = (roomID: string, streamList: {
    streamID: string;
    user: ZegoUser;
    extraInfo: string;
}[]) => void;
/**
 * 音频设备状态变化回调
 *
 * Note: 详情描述：监测到系统中有音频设备添加或移除时，会触发此回调。通过监听此回调，用户可在必要的时候更新使用特定设备进行音频采集。
 *
 * Note: 触发条件：音频设备添加或移除时触发
 *
 * Note: 限制频率：无
 *
 * Note: 关注回调：无
 *
 * Note: 重点提示：
 *       需要浏览器授权麦克风摄像头后才能触发回调；
 *       由于设备和浏览器的限制，部分浏览器在使用某些设备时可能不会触发该回调
 *
 * Note: 支持版本：1.16.0
 *
 * Note: 废弃时间：无
 *
 * @param updateType 'DELETE' 表示设备删除， 'ADD'表示设备增加
 * @param deviceType 'Input'表示输入设备， 'Output'表示输出设备
 * @param deviceInfo 设备信息
 */
declare type audioDeviceStateChangedCallBack = (updateType: "DELETE" | "ADD", deviceType: "Input" | "Output", deviceInfo: {
    deviceName: string;
    deviceID: string;
}) => void;
/**
 * 设备异常回调
 *
 * Note: 详情描述：当本地推流的音频或视频设备读写出现异常时会触发此回调
 *
 * Note: 触发条件：推流使用的音视频设备出现异常（如松动时）触发
 *
 * Note: 限制频率：无
 *
 * Note: 关注回调：无
 *
 * Note: 重点提示：
 *       推流后才可能触发；
 *       由于设备和浏览器的限制，部分浏览器在使用某些设备时可能不会触发该回调
 *
 * Note: 支持版本：1.16.0
 *
 * Note: 废弃时间：无
 *
 * @param errorCode 错误码
 * @param deviceName 发生异常的设备名称
 */
declare type deviceErrorCallBack = (errorCode: number, deviceName: string) => void;
/**
 * 视频设备状态变化更新回调
 *
 * Note: 详情描述：监测到系统中有视频设备添加或移除时，会触发此回调。通过监听此回调，用户可在必要的时候更新使用特定设备进行视频采集。
 *
 * Note: 触发条件：视频设备添加或移除时触发
 *
 * Note: 限制频率：无
 *
 * Note: 关注回调：无
 *
 * Note: 重点提示：
 *       需要浏览器授权麦克风摄像头后才能触发回调；
 *       由于设备和浏览器的限制，部分浏览器在使用某些设备时可能不会触发该回调
 *
 * Note: 支持版本：1.16.0
 *
 * Note: 废弃时间：无
 *
 * @param updateType 'DELETE' 为设备被移除， 'ADD'表示设备增加
 * @param deviceInfo 设备信息，deviceName为设备名称，deviceID为设备ID
 */
declare type videoDeviceStateChangedCallBack = (updateType: "DELETE" | "ADD", deviceInfo: {
    deviceName: string;
    deviceID: string;
}) => void;
export interface ZegoEvent extends ZegoRTCEvent, ZegoRTMEvent {
}
export {};
