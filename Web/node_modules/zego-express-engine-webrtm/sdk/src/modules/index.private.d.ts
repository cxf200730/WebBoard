import { ZegoDataReport, ZegoLogger, ENUM_RUN_STATE } from '../zego.entity';
import { HeartBeatHandler } from './heartBeatHandler';
import { LiveHandler } from './liveHandler';
import { MessageHandler } from './messageHandler';
import { StateCenter } from '../stateCenter';
import { UserHandler } from './userHandler';
import { LiveRoomPrivateService } from '../service.private';
import { HallHandler } from './hallHandler';
import { RoomPrivateHandler } from './roomHandler.private';
import { RetryHallHandler } from './retryHallHandler';
export declare class LiveRoomModules {
    private stateCenter;
    private logger;
    private dataReport;
    service: LiveRoomPrivateService;
    hallHandler: HallHandler;
    heartBeatHandler: HeartBeatHandler;
    messageHandler: MessageHandler;
    liveHandler: LiveHandler;
    userHandler: UserHandler;
    roomPrivateHandler: RoomPrivateHandler;
    roomID: string;
    dispatchServer: string;
    deviceID: string;
    deviceType: string;
    anType: 0 | 1;
    sessionExpire: string;
    pri_roomID: string;
    roomSid: string;
    roomFlag: number;
    timeStamp: number;
    netType: number;
    userSeq: number;
    hallRunState: ENUM_RUN_STATE;
    retryHallHandler?: RetryHallHandler;
    hallToken: string;
    roomSessionID: string;
    lastHallRunState: ENUM_RUN_STATE;
    runRoomState: ENUM_RUN_STATE;
    lastRunRoomState: ENUM_RUN_STATE;
    lastHallState: 'DISCONNECTED' | 'CONNECTING' | 'CONNECTED';
    hallState: 'DISCONNECTED' | 'CONNECTING' | 'CONNECTED';
    lastRoomState: 'DISCONNECTED' | 'CONNECTING' | 'CONNECTED';
    roomState: 'DISCONNECTED' | 'CONNECTING' | 'CONNECTED';
    sessionID: string;
    constructor(stateCenter: StateCenter, logger: ZegoLogger, dataReport: ZegoDataReport, service: LiveRoomPrivateService);
    init(): void;
    bindSocketHandler(): void;
    bindHeatBeatHandler(): void;
    bindHallHandler(): void;
    bindUserHandler(): void;
    bindMessageHandler(): void;
    bindLiveHandler(): void;
    bindRoomHandler(): void;
    private HBResponse;
    roomLoginResponse(msg: any): void;
    setRoomRunState(newRunState: ENUM_RUN_STATE): void;
    isLogin(): boolean;
}
