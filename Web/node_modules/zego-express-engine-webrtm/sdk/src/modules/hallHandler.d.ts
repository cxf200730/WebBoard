import { ZegoError } from '../zego.entity';
import { StateCenter } from '../stateCenter';
import { ZegoDataReport, ZegoLogger } from 'zego-express-logger';
import { LiveRoomPrivateService } from '../service.private';
import { ZegoInitConfig, ZegoUser } from '../../code/zh/ZegoExpressEntity';
import { LiveRoomModules as LiveRoomPriModules } from './index.private';
export declare class HallHandler {
    private logger;
    private stateCenter;
    private dataReport;
    private service;
    private room;
    private tryLoginTimer;
    private tryLoginCount;
    private tryLoginInterval;
    constructor(logger: ZegoLogger, stateCenter: StateCenter, dataReport: ZegoDataReport, service: LiveRoomPrivateService, room: LiveRoomPriModules);
    private setRunState;
    private resetTryLogin;
    resetHall(): void;
    resetRoomCallBack(): void;
    loginSuccessCallBack(lastRunState: number, msg: any): void;
    handleHallKickout(msg: any): void;
    handleHbLogout(err: ZegoError): void;
    onDisconnect(err: ZegoError): void;
    onConnecting(err: ZegoError): void;
    disconnectedHandle(error: ZegoError): void;
    hallStateHandle(state: 'DISCONNECTED' | 'CONNECTING' | 'CONNECTED', error: ZegoError, extendedData?: string): void;
    loginHall(server: string, user: ZegoUser, config: ZegoInitConfig | undefined, success: (success: boolean) => void, error: (err: ZegoError) => void): void;
    private tryLoginHall;
    private openHandler;
    private handleLoginRsp;
    private handleLoginFail;
    private handleLoginSuccess;
    private closeHandler;
    logout(): void;
    private handleLogoutRsp;
}
