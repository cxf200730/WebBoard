import { ENUM_RUN_STATE, ZegoDataReport, ZegoLogger, ZegoError } from '../zego.entity';
import { StateCenter } from '../stateCenter';
import { LiveRoomService } from '../service';
import { ZegoRoomConfig, ZegoUser } from '../../code/zh/ZegoExpressEntity';
import { LiveRoomModules } from '.';
export declare class RoomHandler {
    private logger;
    private stateCenter;
    private dataReport;
    private service;
    private room;
    private tryLoginTimer;
    private tryLoginCount;
    private tryLoginInterval;
    private tokenTimer;
    private beforeExpire;
    constructor(logger: ZegoLogger, stateCenter: StateCenter, dataReport: ZegoDataReport, service: LiveRoomService, room: LiveRoomModules);
    resetTokenTimer(interval: number): void;
    private stopTokenTimer;
    setRunState(newRunState: ENUM_RUN_STATE): void;
    private resetTryLogin;
    resetRoom(isAll?: boolean): void;
    resetRoomCallBack(): void;
    loginSuccessCallBack(lastRunState: number, msg: any): void;
    handlePushKickout(msg: any, isAll?: boolean): void;
    handleHbLogout(err: ZegoError): void;
    onDisconnect(err: ZegoError): void;
    onConnecting(err: ZegoError): void;
    disconnectedHandle(error: ZegoError, extendedData?: string): void;
    roomStateHandle(state: 'DISCONNECTED' | 'CONNECTING' | 'CONNECTED', error: ZegoError, extendedData?: string): void;
    login(server: string, roomid: string, token: string, user: ZegoUser, config: ZegoRoomConfig | undefined, success: (success: boolean) => void, error: (err: ZegoError) => void): void;
    private tryLogin;
    private openHandler;
    private handleLoginRsp;
    private loginCallback;
    private handleLoginFail;
    private handleLoginSuccess;
    private closeHandler;
    logout(isAll?: boolean): void;
    private handleLogoutRsp;
}
