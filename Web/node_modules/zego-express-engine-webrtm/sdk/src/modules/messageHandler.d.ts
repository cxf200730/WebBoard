import { StateCenter } from '../stateCenter';
import { MessageInfo, ZegoLogger, ZegoDataReport, ZegoError } from '../zego.entity';
import { LiveRoomService } from '../service';
import { LiveRoomModules } from '.';
import { LiveRoomPrivateService } from '../service.private';
import { LiveRoomModules as LiveRoomPriModules } from './index.private';
export declare class MessageHandler {
    private logger;
    private stateCenter;
    private dataReport;
    private service;
    private room;
    private sendRoomMsgTime;
    private sendRoomMsgInterval;
    private bigImCallbackMap;
    private bigImLastTimeIndex;
    private bigIMmessageList;
    private bigImTimer;
    private relayTimer;
    serverTimeOffset: number;
    private datiTimeWindow;
    private bigimTimeWindow;
    private isReliable;
    constructor(logger: ZegoLogger, stateCenter: StateCenter, dataReport: ZegoDataReport, service: LiveRoomService | LiveRoomPrivateService, room: LiveRoomModules | LiveRoomPriModules);
    loginRsp(msg: any): void;
    sendReliableMessage(type: string, data: string, success: (data: {
        seq: number;
        errorCode: number;
    }) => void, error: (err: {
        code: number | string;
        msg?: string;
        seq?: number;
    }) => void): void;
    private fetchReliableMessage;
    private transSeqMap;
    private handleFetchTransRsp;
    handlePushTransMsg(msg: {
        body: {
            trans_type: any;
            trans_seq: any;
            trans_user_idname: string;
            trans_idname: string;
            trans_data: string;
        };
    }): void;
    private onRecvReliableMessage;
    sendRoomMsg(msg_category: 1 | 2, type: 1 | 2 | 3, room_id: string, msg_content: string, success: Function, error: Function): boolean;
    handlePushRoomMsg(msg: any): void;
    sendCustomCommand(dstMembers: string[], customContent: string | Record<string, any>, success: Function, error: Function): boolean;
    handlePushCustomMsg(msg: any): void;
    sendBigRoomMessage(category: 1 | 2, type: 1 | 2 | 3, room_id: string, content: string, success?: Function, error?: Function): void;
    sendBigRoomMessageInternal(msgs: any, success: Function, error: Function): void;
    handleBigImMsgRsp(msg: any): void;
    setBigImTimer(offset: number, timeWindow: number): void;
    onBigImTimer(): void;
    handlePushMergeMsg(msg: any): void;
    handlePushBigRooMsg(bodyString: string): void;
    onRecvBigRoomMessage(messageList: MessageInfo[], roomId: string): void;
    resetMessageInfo(): void;
    private realyMessageList;
    sendRelayMessage(type: string, data: string, success: (seq: number) => void, error: (err: ZegoError, seq: number) => void): void;
    sendRelayMessageInternal(type: string, data: string, success: Function | null | undefined, error: Function | null | undefined): void;
    setRelayTimer(offset: number, timeWindow: number): void;
    onRelayTimer(): void;
    getRoomChatInfo(msgID: number, msgCount: number, success: Function, error: Function): void;
}
