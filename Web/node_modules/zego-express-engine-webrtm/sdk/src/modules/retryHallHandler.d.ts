import { TryHandler } from './retryHandler';
import { ZegoLogger } from 'zego-express-logger';
import { ZegoError } from '../zego.entity';
import { StateCenter } from '../stateCenter';
import { ZegoInitConfig, ZegoUser } from '../../code/zh/ZegoExpressEntity';
import { HallHandler } from './hallHandler';
import { LiveRoomModules as LiveRoomPriModules } from './index.private';
export declare class RetryHallHandler extends TryHandler {
    protected logger: ZegoLogger;
    protected stateCenter: StateCenter;
    private room;
    hallHandler: HallHandler;
    user: ZegoUser;
    server: string;
    config?: ZegoInitConfig;
    constructor(logger: ZegoLogger, stateCenter: StateCenter, room: LiveRoomPriModules);
    initRoom(hallHandler: HallHandler, user: ZegoUser, server: string, config?: ZegoInitConfig): void;
    active(isFirst?: boolean): void;
    startMaxTime(): void;
    stopMaxTime(): void;
    onactive(success: boolean, error?: ZegoError): void;
    handleError(error: ZegoError, isServerError?: boolean): boolean;
    handleLoginFinish(success: boolean, error?: ZegoError, isServerError?: boolean): void;
}
