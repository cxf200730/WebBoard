import { ZegoLogger } from 'zego-express-logger';
import { StateCenter } from './stateCenter';
import { ZegoSocketService } from '../util/socket-util';
import { LiveRoomService } from './service';
export declare class LiveRoomPrivateService extends LiveRoomService {
    protected stateCenter: StateCenter;
    protected logger: ZegoLogger;
    protected service: ZegoSocketService;
    protected cmdSeq: number;
    protected responseRouters: {
        [index: string]: Function;
    };
    constructor(stateCenter: StateCenter, logger: ZegoLogger);
    protected checkResponse(msg: any): boolean;
    protected handleSendCommandMsgRsp(msg: {
        [index: string]: any;
    }): void;
    onPush(): void;
    handleHallKickout(msg: any): void;
    handlePushKickout(msg: any): void;
    handlePushCustomMsg(msg: any): void;
    handlePushRoomMsg(msg: any): void;
    handlePushUserStateUpdateMsg(msg: any): void;
    handlePushMergeMsg(msg: any): void;
    handlePushTransMsg(msg: any): void;
    handleBigImMsgRsp(msg: any): void;
    handlePushSignalMsg(msg: any): void;
    closeHandler(handler: (evt: any) => void): void;
    openHandler(handler: () => void): void;
    errorHandler(handler: (evt: Event) => void): void;
    getHeader(cmd: string): any;
    startCheck(): void;
    stopCheck(): void;
    isDisConnect(): boolean;
    createSocket(server: string): void;
    closeSocket(): void;
    sendMessage(cmd: string, body: any, suc: Function, err: Function): number;
    on(cmd: string, callBack: (msg: any) => void): void;
    loginHall(suc: Function, error: Function): void;
    logoutHall(suc: Function, error: Function): void;
    enterRoom(suc: Function, error: Function): void;
    leaveRoom(suc: Function, err: Function): void;
    heartBeat(suc: Function, err: Function): number;
    fetchUserList(body: any, suc: Function, err: Function): number;
    fetchReliableMessage(body: any, suc: Function, err: Function): number;
    sendReliableMessage(body: any, suc: Function, err: Function): number;
    sendRoomMsg(body: any, suc: Function, err: Function): number;
    sendCustomCommand(body: any, suc: Function, err: Function): number;
    sendBigRoomMessage(body: any, suc: Function, err: Function): number;
    sendRelayMessage(body: any, suc: Function, err: Function): number;
    sendSignalCmd(body: any, suc: Function, err: Function): number;
}
