{"remainingRequest":"/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/src/views/Game/components/app-stage.vue?vue&type=style&index=0&id=6a26facc&lang=less&scoped=true&","dependencies":[{"path":"/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/src/views/Game/components/app-stage.vue","mtime":1629254366952},{"path":"/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/node_modules/less-loader/dist/cjs.js","mtime":1629251458988},{"path":"/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chengxiaofeng/Desktop/项目/手写板项目/8-13Web端/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZWwtY2FyZHsKICB3aWR0aDogODcwcHg7CiAgaGVpZ2h0OiA2MzBweDsKfQo="},{"version":3,"sources":["app-stage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;AACA;AACA;AACA","file":"app-stage.vue","sourceRoot":"src/views/Game/components","sourcesContent":["<template>\n  <el-card ref=\"wrapper\" :body-style=\"{ padding: 0}\">\n    <!-- X<input type=\"text\"   v-model=\"X\"/>\n    Y<input type=\"text\"  v-model=\"Y\"/>\n    <br />\n    X2<input type=\"text\"   v-model=\"X2\"/>\n    Y2<input type=\"text\"  v-model=\"Y2\"/> -->\n    <v-stage\n      :config=\"stageConfig\"\n      @mousedown=\"mousedownHandler\"\n      @mouseup=\"mouseupHandler\"\n      @mousemove=\"mousemoveHandler\"\n    >\n      <v-layer>\n        <v-line\n          v-for=\"(line, index) in lines\"\n          :key=\"index\"\n          :config=\"line\"\n        />\n      </v-layer>\n    </v-stage>\n    \n  </el-card>\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex'\nexport default {\n  props:{\n    Points:{}\n  },\n  model: {\n    prop: \"Points\",  // v-model对应的属性\n    event: \"change\",  // v-model对应的时间\n  },\n  created(){\n    // window.onmousemove = (e)=>{\n    //   e = window.event || e;\n    //     this.X = e.screenX \n    //     this.Y = e.screenY\n    //     let width = window.screen.width\n    //     let height = window.screen.height\n    //     // console.log(window.screen.width + \"\" + window.screen.height); \n    //     this.X2 = (this.X / width) * 870 \n    //     this.Y2 = (this.Y / height) * 630 \n    // }\n  },\n  data() {\n    return {\n      // 画布配置\n      stageConfig: {\n        width: 870,\n        height: 630\n      },\n      // 绘画状态\n      painting: false,\n      stroke: '#df4b26',\n      strokeWidth: 2,\n      \n    }\n  },\n  computed: {\n    ...mapState(['lines']),\n    ...mapGetters(['isGameStarted', 'isGameHolder'])\n  },\n\n  mounted() {\n    // 将画布宽度设置与容器同宽\n    this.stageConfig.width = this.$refs.wrapper.$el.offsetWidth\n    \n  },\n\n  methods: {\n    \n    // 鼠标按下\n    mousedownHandler(e) {\n      if (!this.isGameHolder || !this.isGameHolder) return\n\n      this.painting = true\n      // 创建一个新线条\n      const newLine = {\n        stroke: this.stroke,\n        strokeWidth: this.strokeWidth,\n        // points: [e.evt.layerX, e.evt.layerY]\n        points: [this.Points.X2, this.Points.Y2]\n      }\n      // 本地画线, 存到vuex中\n      this.$store.commit('drawNewLine', newLine)\n      // 请求服务器\n      this.$store.dispatch('sendDrawNewLine', newLine)\n\n      // e = window.event || e;\n      // console.log(e.clientX + \" \" + e.clientY);\n    },\n\n    // 鼠标拖动\n    mousemoveHandler(e) {\n      // e = window.event || e;\n      // console.log(e.screenX + \" \" + e.screenY);\n      if (!this.painting) return\n      const lastLine = this.lines[this.lines.length - 1]\n      // lastLine.points = lastLine.points.concat([e.evt.layerX, e.evt.layerY])\n      lastLine.points = lastLine.points.concat([this.Points.X2, this.Points.Y2])\n      console.log(lastLine.points)\n      this.$store.commit('updateNewLine', lastLine)\n      // 请求服务器\n      this.$store.dispatch('sendUpdateNewLine', lastLine)\n      \n    },\n\n    // 鼠标释放\n    mouseupHandler() {\n      this.painting = false\n    },\n    //  respondsToChange() {\n    // // 触发v-model的事件\n    //   this.$emit(\"change\", this.Points);\n    // },\n  },\n  // watch: {\n  //   Points: {\n  //     immediate: true,\n  //     handler(val) {\n  //       this.Points = val;\n  //     },\n  //   },\n  // },\n\n}\n</script>\n<style lang=\"less\" scoped>\n.el-card{\n  width: 870px;\n  height: 630px;\n}\n</style>"]}]}